#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import os
import subprocess

try:
    with open("config.json", 'r') as fp:
        config = json.load(fp)
except:
    config = {"host": "", "lets_encrypt": False}

config["admin_url"] = agent.read_envfile("admin_url.env")["ADMINURL"] if os.path.exists("admin_url.env") else "url_not_available_yet"

try:
    config["admin_email"] = agent.read_envfile("config.env")["ADMINMAIL"] if os.path.exists("config.env") else ""
except:
    config["admin_email"] = ""

if config["admin_email"] > "":
  # Check if admin exists
  command = "/usr/bin/podman exec -ti passbolt-db mysql -u root -ppassbolt -D passbolt -e 'select username from users where username = \"" + config["admin_email"] + "\"'"
  output = subprocess.run(command, shell=True, capture_output=True, text=True)
  admin_found = config["admin_email"] in output.stdout
  config['admin_created'] = True if admin_found else False

  # Check if admin is active
  command = "/usr/bin/podman exec -ti passbolt-db mysql -u root -ppassbolt -D passbolt -e 'select username from users where username = \"" + config["admin_email"] + "\" and active=1'"
  output = subprocess.run(command, shell=True, capture_output=True, text=True)
  admin_active = config["admin_email"] in output.stdout
  config['admin_not_active'] = False if admin_active else True
else:
  config['admin_created'] = False
  config['admin_not_active'] = True

json.dump(config, fp=sys.stdout)
